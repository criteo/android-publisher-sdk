name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  java-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Store Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.0.7

      # This cache below is not fully working: it should go above the "Set up Android SDK" but:
      # - The action does not support having a SDK already setup -> platform-tools, licenses are re-downloaded
      # - Having this cache still prevents Gradle to re-download every time the build-tools.
      - name: Store Android SDK
        uses: actions/cache@v2
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-android-

      - name: Build & Run Java tests
        run: ./gradlew check assembleAndroidTest

      - name: Junit Report to Annotations
        uses: ashley-taylor/junit-report-annotations-action@1.3
        if: failure()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all human readable reports (JUnit+Lint+Detekt+Jacoco)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: junit-report
          path: "**/build/reports/**/*"

      - name: Upload XML reports for quality-tests
        uses: actions/upload-artifact@v2
        with:
          name: java-quality-reports
          path: |
            **/reports/**/*.xml
            **/TEST-*.xml

  android-tests:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Store Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.0.7

      # On merge, run non-flaky-tests without retry then flaky tests with retry policy
      - name: Run all Android tests
        uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
        if: github.event_name != 'pull_request'
        with:
          api: 29
          tag: google_apis
          cmd: >
            sh -c "
            ./gradlew connectedCheck
            -Pandroid.testInstrumentationRunnerArguments.notAnnotation=androidx.test.filters.FlakyTest
            &&
            ./gradlew gordon --tests=androidx.test.filters.FlakyTest
            "
          # Use a medium size skin rather than default size. Some tests need to have a decent size.
          cmdOptions: -no-snapshot-save -noaudio -no-boot-anim -skin 360x640

      # Run only non-flaky tests on PR
      - name: Run Android tests w/o @FlakyTest
        uses: malinskiy/action-android/emulator-run-cmd@release/0.0.7
        if: github.event_name == 'pull_request'
        with:
          api: 29
          tag: google_apis
          cmd: >
            ./gradlew connectedCheck
            -Pandroid.testInstrumentationRunnerArguments.notAnnotation=androidx.test.filters.FlakyTest
          # Use a medium size skin rather than default size. Some tests need to have a decent size.
          cmdOptions: -no-snapshot-save -noaudio -no-boot-anim -skin 360x640

      - name: Upload logcat output
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: logcat
          path: artifacts/logcat.log

      - name: Junit Report to Annotations
        uses: ashley-taylor/junit-report-annotations-action@1.3
        if: failure()
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all human readable reports (JUnit+Jacoco)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: junit-report
          path: "**/build/reports"

      - name: Upload XML reports for quality-tests
        uses: actions/upload-artifact@v2
        with:
          name: android-quality-reports
          path: |
            **/reports/**/*.xml
            **/TEST-*.xml
            **/test-results/gordon/*.xml

  quality-tests:
    runs-on: ubuntu-latest

    needs:
      - java-tests
      - android-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Sonar drops support of Java 8 in favor of the new LTS: Java 11.
      # See https://sonarcloud.io/documentation/user-guide/move-analysis-java-11/
      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download quality reports of java-tests
        uses: actions/download-artifact@v2
        with:
          name: java-quality-reports

      - name: Download quality reports of android-tests
        uses: actions/download-artifact@v2
        with:
          name: android-quality-reports

      - name: SonarQube Analysis
        run: ./gradlew sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-development-artifacts:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    needs:
      - java-tests
      - android-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.0.7

      - name: Deploy artifacts and notify on Slack
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
        run: ./gradlew bintrayUpload sendReleaseDeployedToBintrayMessageToSlack